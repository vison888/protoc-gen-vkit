// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: source/flow_log.proto

package demo

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowLogTimeStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//vad 开始时间
	VadStartTime int64 `protobuf:"varint,1,opt,name=vad_start_time,json=vadStartTime,proto3" json:"vad_start_time,omitempty"`
	//vad 结束时间
	VadEndTime int64 `protobuf:"varint,2,opt,name=vad_end_time,json=vadEndTime,proto3" json:"vad_end_time,omitempty"`
	//nlp 消耗时间
	NlpCostTime int32 `protobuf:"varint,3,opt,name=nlp_cost_time,json=nlpCostTime,proto3" json:"nlp_cost_time,omitempty"`
	//nlp 开始时间
	NlpStartTime int64 `protobuf:"varint,4,opt,name=nlp_start_time,json=nlpStartTime,proto3" json:"nlp_start_time,omitempty"`
	//nlp 结束时间
	NlpEndTime int64 `protobuf:"varint,5,opt,name=nlp_end_time,json=nlpEndTime,proto3" json:"nlp_end_time,omitempty"`
	//asr 消耗时间
	AsrCostTime int32 `protobuf:"varint,6,opt,name=asr_cost_time,json=asrCostTime,proto3" json:"asr_cost_time,omitempty"`
	//asr 开始时间
	AsrStartTime int64 `protobuf:"varint,7,opt,name=asr_start_time,json=asrStartTime,proto3" json:"asr_start_time,omitempty"`
	//asr 结束时间
	AsrEndTime int64 `protobuf:"varint,8,opt,name=asr_end_time,json=asrEndTime,proto3" json:"asr_end_time,omitempty"`
}

func (x *FlowLogTimeStat) Reset() {
	*x = FlowLogTimeStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_flow_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLogTimeStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLogTimeStat) ProtoMessage() {}

func (x *FlowLogTimeStat) ProtoReflect() protoreflect.Message {
	mi := &file_source_flow_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLogTimeStat.ProtoReflect.Descriptor instead.
func (*FlowLogTimeStat) Descriptor() ([]byte, []int) {
	return file_source_flow_log_proto_rawDescGZIP(), []int{0}
}

func (x *FlowLogTimeStat) GetVadStartTime() int64 {
	if x != nil {
		return x.VadStartTime
	}
	return 0
}

func (x *FlowLogTimeStat) GetVadEndTime() int64 {
	if x != nil {
		return x.VadEndTime
	}
	return 0
}

func (x *FlowLogTimeStat) GetNlpCostTime() int32 {
	if x != nil {
		return x.NlpCostTime
	}
	return 0
}

func (x *FlowLogTimeStat) GetNlpStartTime() int64 {
	if x != nil {
		return x.NlpStartTime
	}
	return 0
}

func (x *FlowLogTimeStat) GetNlpEndTime() int64 {
	if x != nil {
		return x.NlpEndTime
	}
	return 0
}

func (x *FlowLogTimeStat) GetAsrCostTime() int32 {
	if x != nil {
		return x.AsrCostTime
	}
	return 0
}

func (x *FlowLogTimeStat) GetAsrStartTime() int64 {
	if x != nil {
		return x.AsrStartTime
	}
	return 0
}

func (x *FlowLogTimeStat) GetAsrEndTime() int64 {
	if x != nil {
		return x.AsrEndTime
	}
	return 0
}

type FlowLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//设备sn
	DeviceSn string `protobuf:"bytes,2,opt,name=device_sn,json=deviceSn,proto3" json:"device_sn,omitempty"`
	//会话id
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	//交互id
	InteractId string `protobuf:"bytes,4,opt,name=interact_id,json=interactId,proto3" json:"interact_id,omitempty"`
	//asr文本
	AsrText string `protobuf:"bytes,5,opt,name=asr_text,json=asrText,proto3" json:"asr_text,omitempty"`
	//tts文本
	TtsText string `protobuf:"bytes,6,opt,name=tts_text,json=ttsText,proto3" json:"tts_text,omitempty"`
	//技能id
	SkillId string `protobuf:"bytes,7,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	//意图id
	IntentId string `protobuf:"bytes,8,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	//状态
	FlowStatus string `protobuf:"bytes,9,opt,name=flow_status,json=flowStatus,proto3" json:"flow_status,omitempty"`
	//语音文件
	VoiceFilePath string `protobuf:"bytes,10,opt,name=voice_file_path,json=voiceFilePath,proto3" json:"voice_file_path,omitempty"`
	//交互时间
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	//相关统计
	TimeStat *FlowLogTimeStat `protobuf:"bytes,12,opt,name=time_stat,json=timeStat,proto3" json:"time_stat,omitempty"`
}

func (x *FlowLog) Reset() {
	*x = FlowLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_flow_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLog) ProtoMessage() {}

func (x *FlowLog) ProtoReflect() protoreflect.Message {
	mi := &file_source_flow_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLog.ProtoReflect.Descriptor instead.
func (*FlowLog) Descriptor() ([]byte, []int) {
	return file_source_flow_log_proto_rawDescGZIP(), []int{1}
}

func (x *FlowLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowLog) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *FlowLog) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FlowLog) GetInteractId() string {
	if x != nil {
		return x.InteractId
	}
	return ""
}

func (x *FlowLog) GetAsrText() string {
	if x != nil {
		return x.AsrText
	}
	return ""
}

func (x *FlowLog) GetTtsText() string {
	if x != nil {
		return x.TtsText
	}
	return ""
}

func (x *FlowLog) GetSkillId() string {
	if x != nil {
		return x.SkillId
	}
	return ""
}

func (x *FlowLog) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *FlowLog) GetFlowStatus() string {
	if x != nil {
		return x.FlowStatus
	}
	return ""
}

func (x *FlowLog) GetVoiceFilePath() string {
	if x != nil {
		return x.VoiceFilePath
	}
	return ""
}

func (x *FlowLog) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FlowLog) GetTimeStat() *FlowLogTimeStat {
	if x != nil {
		return x.TimeStat
	}
	return nil
}

type FlowLogPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 第几页，从1开始
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页多少条
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	//设备标识
	DeviceSn string `protobuf:"bytes,3,opt,name=device_sn,json=deviceSn,proto3" json:"device_sn,omitempty"`
	//开始时间戳
	StartTime int64 `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//结束时间戳
	EndTime int64 `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *FlowLogPageReq) Reset() {
	*x = FlowLogPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_flow_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLogPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLogPageReq) ProtoMessage() {}

func (x *FlowLogPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_source_flow_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLogPageReq.ProtoReflect.Descriptor instead.
func (*FlowLogPageReq) Descriptor() ([]byte, []int) {
	return file_source_flow_log_proto_rawDescGZIP(), []int{2}
}

func (x *FlowLogPageReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FlowLogPageReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FlowLogPageReq) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *FlowLogPageReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FlowLogPageReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type FlowLogPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	//记录总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	//数据列表
	List []*FlowLog `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FlowLogPageResp) Reset() {
	*x = FlowLogPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_flow_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLogPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLogPageResp) ProtoMessage() {}

func (x *FlowLogPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_source_flow_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLogPageResp.ProtoReflect.Descriptor instead.
func (*FlowLogPageResp) Descriptor() ([]byte, []int) {
	return file_source_flow_log_proto_rawDescGZIP(), []int{3}
}

func (x *FlowLogPageResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FlowLogPageResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FlowLogPageResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FlowLogPageResp) GetList() []*FlowLog {
	if x != nil {
		return x.List
	}
	return nil
}

type FlowLogExportPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//设备标识
	DeviceSn string `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn,proto3" json:"device_sn,omitempty"`
	//开始时间戳
	StartTime int64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//结束时间戳
	EndTime int64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *FlowLogExportPageReq) Reset() {
	*x = FlowLogExportPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_flow_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLogExportPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLogExportPageReq) ProtoMessage() {}

func (x *FlowLogExportPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_source_flow_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLogExportPageReq.ProtoReflect.Descriptor instead.
func (*FlowLogExportPageReq) Descriptor() ([]byte, []int) {
	return file_source_flow_log_proto_rawDescGZIP(), []int{4}
}

func (x *FlowLogExportPageReq) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *FlowLogExportPageReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FlowLogExportPageReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type FlowLogExportPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	FileUrl string `protobuf:"bytes,3,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
}

func (x *FlowLogExportPageResp) Reset() {
	*x = FlowLogExportPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_flow_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLogExportPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLogExportPageResp) ProtoMessage() {}

func (x *FlowLogExportPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_source_flow_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLogExportPageResp.ProtoReflect.Descriptor instead.
func (*FlowLogExportPageResp) Descriptor() ([]byte, []int) {
	return file_source_flow_log_proto_rawDescGZIP(), []int{5}
}

func (x *FlowLogExportPageResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FlowLogExportPageResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FlowLogExportPageResp) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

var File_source_flow_log_proto protoreflect.FileDescriptor

var file_source_flow_log_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x61, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x76, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x76, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x6c, 0x70, 0x43, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6c, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x6c,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6c,
	0x70, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x6c, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x73, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73, 0x72, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x73,
	0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x07, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x74, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x74, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x22, 0x9a, 0x01,
	0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x0a, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x0f, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x14,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x15, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x32, 0xdc, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2f, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x22, 0x1e, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x3a, 0x01, 0x2a, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_source_flow_log_proto_rawDescOnce sync.Once
	file_source_flow_log_proto_rawDescData = file_source_flow_log_proto_rawDesc
)

func file_source_flow_log_proto_rawDescGZIP() []byte {
	file_source_flow_log_proto_rawDescOnce.Do(func() {
		file_source_flow_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_source_flow_log_proto_rawDescData)
	})
	return file_source_flow_log_proto_rawDescData
}

var file_source_flow_log_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_source_flow_log_proto_goTypes = []interface{}{
	(*FlowLogTimeStat)(nil),       // 0: demo.FlowLogTimeStat
	(*FlowLog)(nil),               // 1: demo.FlowLog
	(*FlowLogPageReq)(nil),        // 2: demo.FlowLogPageReq
	(*FlowLogPageResp)(nil),       // 3: demo.FlowLogPageResp
	(*FlowLogExportPageReq)(nil),  // 4: demo.FlowLogExportPageReq
	(*FlowLogExportPageResp)(nil), // 5: demo.FlowLogExportPageResp
}
var file_source_flow_log_proto_depIdxs = []int32{
	0, // 0: demo.FlowLog.time_stat:type_name -> demo.FlowLogTimeStat
	1, // 1: demo.FlowLogPageResp.list:type_name -> demo.FlowLog
	2, // 2: demo.FlowLogService.Page:input_type -> demo.FlowLogPageReq
	4, // 3: demo.FlowLogService.ExportPage:input_type -> demo.FlowLogExportPageReq
	3, // 4: demo.FlowLogService.Page:output_type -> demo.FlowLogPageResp
	5, // 5: demo.FlowLogService.ExportPage:output_type -> demo.FlowLogExportPageResp
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_source_flow_log_proto_init() }
func file_source_flow_log_proto_init() {
	if File_source_flow_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_source_flow_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLogTimeStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_flow_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_flow_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLogPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_flow_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLogPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_flow_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLogExportPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_flow_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLogExportPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_source_flow_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_source_flow_log_proto_goTypes,
		DependencyIndexes: file_source_flow_log_proto_depIdxs,
		MessageInfos:      file_source_flow_log_proto_msgTypes,
	}.Build()
	File_source_flow_log_proto = out.File
	file_source_flow_log_proto_rawDesc = nil
	file_source_flow_log_proto_goTypes = nil
	file_source_flow_log_proto_depIdxs = nil
}
