package gen_proto

import (
	"bytes"
	"fmt"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	grpcxPackage   = protogen.GoImportPath("github.com/visonlv/go-vkit/grpcx")
)

func GenerateInforePb(gen *protogen.Plugin) {
	for _, f := range gen.Files {
		if !f.Generate {
			continue
		}
		generateFile(gen, f)
	}
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + ".vkit.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-vkit. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-gen-vkit %s", release))
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)

	g.P()
	generateFileContent(gen, file, g)
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P("var _ = new(", grpcPackage.Ident("CallOption"), ")")
	g.P("var _ = new(", grpcxPackage.Ident("Client"), ")")

	g.P()

	if len(file.Services) == 0 {
		return
	}

	var serverBuf bytes.Buffer

	for _, service := range file.Services {
		if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
			g.P("//")
			g.P(deprecationComment)
		}

		g.P(fmt.Sprintf(`
type %sClient struct {
	name string
	cc grpcx.Client
}`, service.GoName))
		sd := &serviceDesc{
			ServiceType: service.GoName,
			ServiceName: string(service.Desc.FullName()),
			Metadata:    file.Desc.Path(),
		}
		for _, method := range service.Methods {
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			var methodDesc *methodDesc
			if rule != nil && ok {
				methodDesc = buildHTTPRule(method, rule)
			} else {
				path := fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())
				methodDesc = buildMethodDesc(method, "POST", path)
			}
			sd.Methods = append(sd.Methods, methodDesc)
			methodDescPath := fmt.Sprintf("%s.%s", service.GoName, method.GoName)
			if method.Desc.IsStreamingClient() && method.Desc.IsStreamingServer() {
				g.P(ReplaceList(allStreamClient, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${req}", methodDesc.Request, "${resp}", methodDesc.Reply))
				g.P(ReplaceList(allStreamClientFunc, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${methodPath}", methodDescPath))
			} else if method.Desc.IsStreamingClient() {
				g.P(ReplaceList(clientStreamClient, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${req}", methodDesc.Request, "${resp}", methodDesc.Reply))
				g.P(ReplaceList(clientStreamClientFunc, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${methodPath}", methodDescPath, "${req}", methodDesc.Request))
			} else if method.Desc.IsStreamingServer() {
				g.P(ReplaceList(serverStreamClient, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${req}", methodDesc.Request, "${resp}", methodDesc.Reply))
				g.P(ReplaceList(serverStreamClientFunc, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${methodPath}", methodDescPath, "${req}", methodDesc.Request))
			} else {
				g.P(ReplaceList(normalClientFunc, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${req}", methodDesc.Request, "${resp}", methodDesc.Reply, "${methodPath}", methodDescPath))
			}

			if method.Desc.IsStreamingClient() && method.Desc.IsStreamingServer() {
				serverBuf.Write([]byte(ReplaceList(allStreamServer, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${req}", methodDesc.Request, "${resp}", methodDesc.Reply, "${methodPath}", methodDescPath)))
			} else if method.Desc.IsStreamingClient() {
				serverBuf.Write([]byte(ReplaceList(clientStreamServer, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${req}", methodDesc.Request, "${resp}", methodDesc.Reply, "${methodPath}", methodDescPath)))
			} else if method.Desc.IsStreamingServer() {
				serverBuf.Write([]byte(ReplaceList(serverStreamServer, "${serviceName}", service.GoName, "${methodName}", method.GoName, "${req}", methodDesc.Request, "${resp}", methodDesc.Reply, "${methodPath}", methodDescPath)))
			}
		}

		g.P(fmt.Sprintf(`
func New%sClient(name string, cc grpcx.Client) *%sClient {
	return &%sClient{name,cc}
}`, service.GoName, service.GoName, service.GoName))

	}

	g.P(serverBuf.String())

}
